---

- name: Network Getting Started First Playbook
  # connection: network_cli
  gather_facts: true
  hosts: nodes
  tasks:
    - set_fact:
        mask_cidr: "{{ ip | ipaddr('prefix') }}"
      vars:
        ip: "{{ ansible_default_ipv4.network }}/{{ ansible_default_ipv4.netmask }}"
    - debug:
        msg: "{{ hostvars['node1'].ansible_ssh_host }}/{{ mask_cidr }}"
    - name: install packages
      become: yes
      apt:
        name:
          - ntp
          - curl
          - python
          - python-dev
          - python-pip
          - less
          - policykit-1
        state: latest
    # - name: reload service ntp
    #   systemd:
    #     name: ntp
    #     state: reloaded
    - name: Add an PostgreSQL apt signing key
      become: yes
      apt_key:
        url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
        state: present
    - name: Add PostgreSQL repo
      become: yes
      apt_repository:
        repo: deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main
        state: present
    - name: set timezone to Europe/Moscow
      timezone:
        name: Europe/Moscow
      become: yes
      become_method: sudo
    - name: Ensure a ru_RU.UTF-8 locale exists
      locale_gen:
        name: ru_RU.UTF-8
        state: present
      become: yes
    - name: install Postgres packages
      become: yes
      apt:
        name:
          - postgresql-9.4
          - postgresql-client-9.4
          - postgresql-contrib-9.4
          - postgresql-server-dev-9.4
        state: present
    - name: turning off postgresql autostart from config
      become: yes
      lineinfile:
        dest: /etc/postgresql/9.4/main/start.conf
        regexp: '^auto'
        line: 'manual'
    - name: disable postgresql service autostart (will be managed by Patroni)
      become: yes
      service:
        name: postgresql
        enabled: no
    # - debug:
    #     msg: "{{isSlave}}"
    - name: stop postgresql service on slave (will be managed by Patroni)
      become: yes
      service:
        name: postgresql
        state: stopped
      # when: isSlave
    - name: Clean artifact path on slave
      become: yes
      file:
        state: absent
        path: /var/lib/postgresql/9.4/main
      when: "{{ isSlave }}"
    - name: copy config-file pg_hba
      become: yes
      template:
        src: pg_hba.j2
        dest: /etc/postgresql/9.4/main/pg_hba.conf
        owner: postgres
    - name: add `postgres` user to sudoers
      become: yes
      user:
        name: postgres
        groups: sudo
        append: yes
    - name: Extract etcd into /tmp/
      unarchive:
        src: https://github.com/etcd-io/etcd/releases/download/v3.3.10/etcd-v3.3.10-linux-amd64.tar.gz
        dest: /tmp/
        remote_src: yes
    - name: copy etcd binary file
      become: yes
      become_method: sudo
      copy:
        src: /tmp/etcd-v3.3.10-linux-amd64/etcd
        dest: /usr/local/bin/etcd
        mode: u+x,g+x,o+x
        remote_src: yes
    - name: copy etcdctl binary file
      become: yes
      become_method: sudo
      copy:
        src: /tmp/etcd-v3.3.10-linux-amd64/etcdctl
        dest: /usr/local/bin/etcdctl
        mode: u+x,g+x,o+x
        remote_src: yes
    - name: create etcd directory
      become: yes
      file:
        path: /etc/etcd
        state: directory
    - name: copy config-file etcd.conf
      become: yes
      template:
        src: etcd.j2
        dest: /etc/etcd/etcd.conf
    - name: Add ctcd user
      become: yes
      user:
        name: etcd
        shell: /usr/sbin/nologin
        home: /var/lib/etcd
    - name: create systemd directory
      become: yes
      file:
        path: /usr/lib/systemd/system/
        state: directory
    - name: copy systemd service file
      become: yes
      copy:
        src: etcd.service
        dest: /usr/lib/systemd/system/etcd.service
    - name: force systemd to reread configs
      become: yes
      systemd:
        name: etcd
        daemon_reload: yes
    - name: enable service etcd and ensure it is not masked
      become: yes
      systemd:
        name: etcd
        state: started
        enabled: yes
      register: etcd_status
    - debug: msg="Etcd service is Running"
      when: etcd_status.status.SubState.find("running") != -1
    - name: copy python requirements.txt file
      become: yes
      copy:
        src: requirements.txt
        dest: /tmp/requirements.txt
    - name: install python requirements
      pip:
        requirements: /tmp/requirements.txt
    - name: install Patroni
      become: yes
      pip:
        name:
          - patroni
          - python-etcd
        state: latest
    - name: create Patroni directory
      become: yes
      file:
        path: /etc/patroni
        state: directory
    - name: generate config-file patroni.yml
      become: yes
      template:
        src: patroni.j2
        dest: /etc/patroni/patroni.yml
    - name: copy systemd service file
      become: yes
      copy:
        src: patroni.service
        dest: /usr/lib/systemd/system/patroni.service
    - name: enable service etcd and ensure it is not masked on master-node
      become: yes
      systemd:
        name: patroni
        state: started
        enabled: yes
        daemon_reload: yes
      when: not {{ isSlave }}
    - name: create replicator DB role
      command: psql -U postgres CREATE ROLE replicator WITH LOGIN REPLICATION ENCRYPTED PASSWORD 'rep-pass';
      when: not "{{ isSlave }}"
    - name: create passwd file
      become: yes
      become_user: postgres
      lineinfile:
        path: /var/lib/postgresql/.pgpass
        state: present
        line: '*:*:*:replicator:rep-pass'
        mode: 0600
      when: not "{{ isSlave }}"
    - name: start service etcd and ensure it is not masked on slave-nodes
      become: yes
      systemd:
        name: patroni
        state: started
        enabled: yes
        daemon_reload: yes
      when: "{{ isSlave }}"